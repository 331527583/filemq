fmq_patch(3)
============

NAME
----
fmq_patch - work with directory patches

SYNOPSIS
--------
----
//  Create new patch
fmq_patch_t *
    fmq_patch_new (char *path, zfile_t *file, fmq_patch_op_t op, char *alias);

//  Destroy a patch
void
    fmq_patch_destroy (fmq_patch_t **self_p);

//  Create copy of a patch
fmq_patch_t *
    fmq_patch_dup (fmq_patch_t *self);

//  Return patch file directory path
char *
    fmq_patch_path (fmq_patch_t *self);

//  Return patch file item
zfile_t *
    fmq_patch_file (fmq_patch_t *self);

//  Return operation
fmq_patch_op_t
    fmq_patch_op (fmq_patch_t *self);
    
//  Return patch virtual file path
char *
    fmq_patch_vpath (fmq_patch_t *self);

//  Set patch virtual file path
void
    fmq_patch_vpath_set (fmq_patch_t *self, char *vpath);

//  Calculate hash digest for file (create only)
void
    fmq_patch_digest_set (fmq_patch_t *self);

//  Return hash digest for patch file 
char *
    fmq_patch_digest (fmq_patch_t *self);
    
//  Self test of this class
int
    fmq_patch_test (bool verbose);
----

DESCRIPTION
-----------

The fmq_patch class works with one patch, which really just says "create
this file" or "delete this file" (referring to a zfile item each time).


EXAMPLE
-------
.From fmq_patch_test method
----
    zfile_t *file = zfile_new (".", "bilbo");
    fmq_patch_t *patch = fmq_patch_new (".", file, patch_create, "/");
    zfile_destroy (&file);
    
    file = fmq_patch_file (patch);
    assert (streq (zfile_filename (file, "."), "bilbo"));
    assert (streq (fmq_patch_vpath (patch), "/bilbo"));
    fmq_patch_destroy (&patch);
----

SEE ALSO
--------
linkfmq:filemq[1]
