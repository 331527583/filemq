<class name = "fmq_client" script = "client_c" codec = "fmq_msg">
This is the FILEMQ/1.0 client protocol handler
<include filename = "license.xml" />

<state name = "start">
    <event name = "ready" next = "requesting access">
        <action name = "send" message ="OHAI" />
    </event>
</state>

<state name = "requesting access">
    <event name = "ORLY" next = "requesting access">
        <action name = "try security mechanism" />
        <action name = "send" message = "YARLY" />
    </event>
    <event name = "OHAI-OK" next = "subscribing">
        <action name = "get next subscription" />
    </event>
</state>

<state name = "subscribing">
    <event name = "ok" next = "subscribing">
        <action name = "send" message = "ICANHAZ" />
        <action name = "get next subscription" />
    </event>
    <event name = "finished" next = "ready">
        <action name = "refill pipeline" />
        <action name = "send" message = "NOM" />
    </event>
</state>

<state name = "ready">
    <event name = "CHEEZBURGER">
        <action name = "store file data" />
        <action name = "refill pipeline" />
        <action name = "send" message = "NOM" />
    </event>
    <event name = "HUGZ">
        <action name = "send" message = "HUGZ-OK" />
    </event>
    <event name = "ICANHAZ-OK" />
</state>

<state name = "defaults">
    <event name = "SRSLY">
        <action name = "log access denied" />
        <action name = "terminate the client" />
    </event>
    <event name = "RTFM">
        <action name = "log invalid message" />
        <action name = "terminate the client" />
    </event>
    <event name = "$other">
        <action name = "log protocol error" />
        <action name = "terminate the client" />
    </event>
</state>

<action name = "initialize the client">
self->next_event = ready_event;
</action>

<action name = "try security mechanism">
    char *login = fmq_config_resolve (self->config, "security/plain/login", "guest");
    char *password = fmq_config_resolve (self->config, "security/plain/password", "");
    zframe_t *frame = fmq_sasl_plain_encode (login, password);
    fmq_msg_mechanism_set (self->request, "PLAIN");
    fmq_msg_response_set (self->request, frame);
</action>

<action name = "get next subscription">
    self->next_event = finished_event;
</action>

<action name = "refill pipeline">
</action>

<action name = "store file data">
</action>

<action name = "log access denied">
</action>

<action name = "log invalid message">
</action>

<action name = "log protocol error">
</action>

<action name = "terminate the client">
self->next_event = terminate_event;
</action>

<method name = "subscribe">
<argument name = "virtual" type = "string" />
<argument name = "local" type = "string" />
printf ("SUBSCRIBE: %s -> %s\n", virtual, local);
</method>

<selftest config = "client_test.cfg">
<init>
fmq_client_connect (self, "tcp://localhost:6001");
sleep (1);
</init>
</selftest>

</class>
