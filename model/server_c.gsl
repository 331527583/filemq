.#  server_c.gsl
.#
.#  Generates a server engine for a specified protocol.
.#
.echo "Generating ../include/$(class.name).h..."
.output "../include/$(class.name).h"
/*  =========================================================================
    $(class.name).h

    Generated header for $(class.name) protocol server
    =========================================================================
*/

#ifndef __$(CLASS.NAME)_H_INCLUDED__
#define __$(CLASS.NAME)_H_INCLUDED__

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
typedef struct _$(class.name)_t $(class.name)_t;

//  Create a new $(class.name)
$(class.name)_t *
    $(class.name)_new (void);

//  Destroy the $(class.name)
void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Bind to endpoint
void
    fmq_server_bind (fmq_server_t *self, const char *endpoint);
    
//  Connect to endpoint
void
    fmq_server_connect (fmq_server_t *self, const char *endpoint);

//  Load server configuration data
void
    fmq_server_configure (fmq_server_t *self, const char *config_file);

.for class.method
//  $(method.text?'':)
void
    $(class.name)_$(name:c) ($(class.name)_t *self\
.   for argument
.       if type = "string"
, const char *$(name)\
.       elsif type = "number"
, long $(name)\
.       else
.           echo "E: we didn't add support for $(type)s in methods"
.       endif
.   endfor
);

.endfor
//  Self test of this class
int
    $(class.name)_test (bool verbose);

#ifdef __cplusplus
}
#endif

#endif
.echo "Generating ../src/$(class.name).c..."
.output "../src/$(class.name).c"
/*  =========================================================================
    $(class.name).c

    Generated class for $(class.name) protocol server
    =========================================================================
*/

#include <czmq.h>
#include "../include/$(class.name).h"
#include "../include/$(class.codec).h"
#include "../include/fmq_config.h"
#include "../include/fmq_sasl.h"

//  The server runs as a background thread so that we can run multiple
//  engines at once. The API talks to the server thread over an inproc
//  pipe.

static void
    server_thread (void *args, zctx_t *ctx, void *pipe);

//  ---------------------------------------------------------------------
//  Structure of our front-end API class

struct _$(class.name)_t {
    zctx_t *ctx;        //  CZMQ context
    void *pipe;         //  Pipe through to server
};


//  --------------------------------------------------------------------------
//  Create a new $(class.name) and a new server instance

$(class.name)_t *
$(class.name)_new (void)
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
    self->ctx = zctx_new ();
    self->pipe = zthread_fork (self->ctx, server_thread, NULL);
    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.name) and stop the server

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;
        zstr_send (self->pipe, "STOP");
        char *string = zstr_recv (self->pipe);
        free (string);
        zctx_destroy (&self->ctx);
        free (self);
        *self_p = NULL;
    }
}


//  --------------------------------------------------------------------------
//  Bind to endpoint

void
fmq_server_bind (fmq_server_t *self, const char *endpoint)
{
    assert (self);
    assert (endpoint);
    zstr_sendm (self->pipe, "BIND");
    zstr_send (self->pipe, endpoint);
}


//  --------------------------------------------------------------------------
//  Connect to endpoint

void
fmq_server_connect (fmq_server_t *self, const char *endpoint)
{
    assert (self);
    assert (endpoint);
    zstr_sendm (self->pipe, "CONNECT");
    zstr_send (self->pipe, endpoint);
}


//  --------------------------------------------------------------------------
//  Load server configuration data
void
fmq_server_configure (fmq_server_t *self, const char *config_file)
{
    zstr_sendm (self->pipe, "CONFIG");
    zstr_send (self->pipe, config_file);
}


.for class.method
//  --------------------------------------------------------------------------

void
$(class.name)_$(name:c) ($(class.name)_t *self\
.   method.send = "send"
.   for argument
.       method.send = "sendm"
.       if last ()
.           argument.send = "send"
.       else
.           argument.send = "sendm"
.       endif
.       if type = "string"
, const char *$(name)\
.       elsif type = "number"
, long $(name)\
.       else
.           echo "E: we didn't add support for $(type)s in methods"
.       endif
.   endfor
)
{
    assert (self);
.   for argument where type = "string"
    assert (endpoint);
.   endfor
    zstr_$(send) (self->pipe, "$(NAME)");
.   for argument
.       if type = "string"
    zstr_$(send) (self->pipe, $(name));
.       elsif type = "number"
    zstr_$(send) (self->pipe, "%ld", $(name));
.       endif
.   endfor
}


.endfor
.#  Inherit defaults state, if any, to all other states
.for class.state as dstate where name = "defaults"
.   for event as devent
.       for class.state where count (event, name = devent.name) = 0
.           copy devent to state
.       endfor
.   endfor
.   delete dstate
.endfor
//  ---------------------------------------------------------------------
//  State machine constants

typedef enum {
    stopped_state = 0,
.for class.state
    $(name:c)_state = $(index ())$(last ()??"" ?",")
.   for event
.       for class.event as cevent where cevent.name = event.name
.       else
.           if "$(name:)" = "$(NAME)"
.               event.external = 1
.           endif
.           copy event to class
.       endfor
.   endfor
.endfor
} state_t;

typedef enum {
.for class.event
    $(name:c)_event = $(index ())$(last ()??"" ?",")
.endfor
} event_t;

.if switches.trace ?= 1
//  Names for animation
char *s_state_name [] = {
    "stopped",
.for class.state
    "$(name:)"$(last ()??"" ?",")
.endfor
};

char *s_event_name [] = {
    "",
.for class.event
    "$(name:)"$(last ()??"" ?",")
.endfor
};

.endif

//  ---------------------------------------------------------------------
//  Simple class for one client we talk to

typedef struct {
    //  Properties accessible to state machine actions
    int64_t heartbeat;          //  Heartbeat interval
    event_t next_event;         //  Next event
    fmq_config_t *config;       //  Configuration tree
    
    //  Properties you should NOT touch
    void *router;               //  Socket to client
    int64_t heartbeat_at;       //  Next heartbeat at this time
    int64_t expires;            //  Expires at this time
    state_t state;              //  Current state
    event_t event;              //  Current event
    char *hashkey;              //  Key into clients hash
    zframe_t *address;          //  Client address identity
    $(codec)_t *request;        //  Last received request
    $(codec)_t *reply;          //  Reply to send out, if any
} client_t;

static client_t *
client_new (void *router, char *hashkey, zframe_t *address)
{
    client_t *self = (client_t *) zmalloc (sizeof (client_t));
    self->heartbeat = 1000;
    self->router = router;
    self->hashkey = hashkey;
.for class.state where item () = 1
    self->state = $(name:c)_state;
.endfor
    self->address = zframe_dup (address);
    self->reply = $(codec)_new (0);
    $(codec)_address_set (self->reply, self->address);
    return self;
}

static void
client_destroy (client_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        client_t *self = *self_p;
        zframe_destroy (&self->address);
        $(codec)_destroy (&self->request);
        $(codec)_destroy (&self->reply);
        free (self->hashkey);
        free (self);
        *self_p = NULL;
    }
}

.for class.action
static void
$(name:c)_action (client_t *self) {
$(string.trim (action.?''):)
}

.endfor
//  Execute state machine as long as we have events

static void
client_execute (client_t *self, fmq_config_t *config, int event)
{
    self->next_event = event;
    self->config = config;
    while (self->next_event) {
        self->event = self->next_event;
        self->next_event = 0;
.if switches.trace ?= 1
        printf ("State=%s, event=%s\\n",
            s_state_name [self->state], s_event_name [self->event]);
.endif
        switch (self->state) {
.for class.state
            case $(name:c)_state:
.   for event
.       if name = "other"
                else {
.       else
.           if index () > 1
                else
.           endif
                if (self->event == $(name:c)_event) {
.       endif
.       for action
.           if name = "send"
                    $(codec)_id_set (self->reply, $(CODEC)_$(MESSAGE:C));
.           elsif name = "stop"
                    self->state = stopped_state;
.           else
                    $(name:c)_action (self);
.               if count (class.action, name = -1.name) = 0
.                   echo 'E: you need to add <action name="$(name)">'
.               endif
.           endif
.       endfor
.       if defined (event.next)
                    self->state = $(next:c)_state;
.       endif
                }
.   endfor
                break;

.endfor
            case stopped_state:
                //  Discard all events silently
                break;
        }
        if ($(codec)_id (self->reply)) {
.if switches.trace ?= 1
            puts ("Send message to client");
            $(codec)_dump (self->reply);
.endif
            $(codec)_send (&self->reply, self->router);
            self->reply = $(codec)_new (0);
            $(codec)_address_set (self->reply, self->address);
        }
    }
}

static void
client_set_request (client_t *self, $(codec)_t *request)
{
    if (self->request)
        $(codec)_destroy (&self->request);
    self->request = request;

    //  Any input from client counts as activity
    self->heartbeat_at = zclock_time () + self->heartbeat;
    self->expires = zclock_time () + self->heartbeat * 3;
}

//  Client hash function that checks if client is alive
static int
client_ping (const char *key, void *client, void *argument)
{
    client_t *self = (client_t *) client;
    if (zclock_time () >= self->heartbeat_at) {
        client_execute (self, (fmq_config_t *) argument, heartbeat_event);
        self->heartbeat_at = zclock_time () + self->heartbeat;
    }
    return 0;
}

//  Client hash function that calculates tickless timer
static int
client_tickless (const char *key, void *client, void *arg)
{
    client_t *self = (client_t *) client;
    uint64_t *tickless = (uint64_t *) arg;
    if (*tickless > self->heartbeat_at)
        *tickless = self->heartbeat_at;
    return 0;
}

//  Callback when we remove client from 'clients' hash table
static void
client_free (void *argument)
{
    client_t *client = (client_t *) argument;
    client_destroy (&client);
}


//  ---------------------------------------------------------------------
//  Context for the server thread

typedef struct {
    zctx_t *ctx;                //  Own CZMQ context
    void *pipe;                 //  Socket to back to caller
    void *router;               //  Socket to talk to clients
    zhash_t *clients;           //  Clients we've connected to
    bool stopped;               //  Has server stopped?
    fmq_config_t *config;       //  Configuration tree
} server_t;

static server_t *
server_new (zctx_t *ctx, void *pipe)
{
    server_t *self = (server_t *) zmalloc (sizeof (server_t));
    self->ctx = ctx;
    self->pipe = pipe;
    self->router = zsocket_new (self->ctx, ZMQ_ROUTER);
    self->clients = zhash_new ();
    return self;
}

static void
server_destroy (server_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        server_t *self = *self_p;
        fmq_config_destroy (&self->config);
        zhash_destroy (&self->clients);
        free (self);
        *self_p = NULL;
    }
}

static void
server_control_message (server_t *self)
{
    zmsg_t *msg = zmsg_recv (self->pipe);
    char *method = zmsg_popstr (msg);
    if (streq (method, "BIND")) {
        char *endpoint = zmsg_popstr (msg);
        int rc = zmq_bind (self->router, endpoint);
        free (endpoint);
    }
    else
    if (streq (method, "CONNECT")) {
        char *endpoint = zmsg_popstr (msg);
        int rc = zmq_connect (self->router, endpoint);
        free (endpoint);
    }
    else
    if (streq (method, "CONFIG")) {
        char *config_file = zmsg_popstr (msg);
        fmq_config_destroy (&self->config);
        self->config = fmq_config_load (config_file);
        //  Always provide application with a config tree, even if empty
        if (!self->config)
            self->config = fmq_config_new ("root", NULL);
        free (config_file);
    }
    else
.for class.method
    if (streq (method, "$(NAME)")) {
.   for argument
.       if type = "string"
        char *$(name) = zmsg_popstr (msg);
.       elsif type = "number"
        char *$(name)_string = zmsg_popstr (msg);
        long $(name) = atoi ($(name)_string);
        free ($(name_string));
.       endif
.   endfor
    $(string.trim (method.):)
.   for argument where type = "string"
        free ($(name));
.   endfor        
    }
    else
.endfor
    if (streq (method, "STOP")) {
        zstr_send (self->pipe, "OK");
        self->stopped = true;
    }
    free (method);
    zmsg_destroy (&msg);
}

static void
server_client_message (server_t *self)
{
    $(codec)_t *request = $(codec)_recv (self->router);
    if (!request)
        return;         //  Interrupted; do nothing

.if switches.trace ?= 1
    puts ("Received message from client");
    $(codec)_dump (request);
.endif
    char *hashkey = zframe_strhex ($(codec)_address (request));
    client_t *client = zhash_lookup (self->clients, hashkey);
    if (client == NULL) {
        client = client_new (self->router, hashkey, $(codec)_address (request));
        zhash_insert (self->clients, hashkey, client);
        zhash_freefn (self->clients, hashkey, client_free);
    }
    else
        free (hashkey);

    client_set_request (client, request);
.   for class.event where external ?= 1
.   if index () > 1
    else
.   endif
    if ($(codec)_id (request) == $(CODEC)_$(NAME:C))
        client_execute (client, self->config, $(name:c)_event);
.   endfor
}

//  Finally here's the server thread itself, which polls its two
//  sockets and processes incoming messages

static void
server_thread (void *args, zctx_t *ctx, void *pipe)
{
    server_t *self = server_new (ctx, pipe);
    zmq_pollitem_t items [] = {
        { self->pipe, 0, ZMQ_POLLIN, 0 },
        { self->router, 0, ZMQ_POLLIN, 0 }
    };
    while (!self->stopped) {
        //  Calculate tickless timer, up to 1 hour
        uint64_t tickless = zclock_time () + 1000 * 3600;
        zhash_foreach (self->clients, client_tickless, &tickless);

        //  Poll until at most next timer event
        int rc = zmq_poll (items, 2,
            (tickless - zclock_time ()) * ZMQ_POLL_MSEC);
        if (rc == -1)
            break;              //  Context has been shut down

        //  Process incoming message from either socket
        if (items [0].revents & ZMQ_POLLIN)
            server_control_message (self);

        if (items [1].revents & ZMQ_POLLIN)
            server_client_message (self);

        //  Send heartbeats to idle clients as needed
        zhash_foreach (self->clients, client_ping, self->config);
    }
    server_destroy (&self);
}


//  --------------------------------------------------------------------------
//  Selftest

int
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): ");
.if switches.trace ?= 1
    printf ("\\n");
.else
    fflush (stdout);
.endif
    zctx_t *ctx = zctx_new ();
    
    $(class.name)_t *self;
    void *dealer = zsocket_new (ctx, ZMQ_DEALER);
    zsocket_set_rcvtimeo (dealer, 2000);
    zsocket_connect (dealer, "tcp://localhost:6000");
    
    $(codec)_t *request, *reply;
    
.for class.selftest
    //  Run selftest using '$(config?'')' configuration
    self = $(class.name)_new ();
    assert (self);
    $(class.name)_bind (self, "tcp://*:6000");
    $(class.name)_configure (self, "$(config:)");

.   for step
.       if defined (send)
    request = $(codec)_new ($(CODEC)_$(SEND:C));
.           if defined (step.)
$(string.trim (step.?''):)
.           endif
    $(codec)_send (&request, dealer);
.       endif
.       if defined (recv)
    reply = $(codec)_recv (dealer);
    assert (reply);
    assert ($(codec)_id (reply) == $(CODEC)_$(RECV:C));
    $(codec)_destroy (&reply);

.       endif
.   endfor
    $(class.name)_destroy (&self);
    
.endfor
    zctx_destroy (&ctx);
    printf ("OK\\n");
    return 0;
}
