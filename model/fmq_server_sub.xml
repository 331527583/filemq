<declare>
//  --------------------------------------------------------------------------
//  Subscription object

typedef struct {
    client_t *client;           //  Always refers to live client
    char *path;                 //  Path client is subscribed to
} sub_t;


//  --------------------------------------------------------------------------
//  Constructor

static sub_t *
sub_new (client_t *client, char *path)
{
    sub_t *self = (sub_t *) zmalloc (sizeof (sub_t));
    self->client = client;
    self->path = strdup (path);
    return self;
}


//  --------------------------------------------------------------------------
//  Destructor

static void
sub_destroy (sub_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        sub_t *self = *self_p;
        free (self->path);
        free (self);
        *self_p = NULL;
    }
}

//  --------------------------------------------------------------------------
//  Add patch to sub client patches list

static void
sub_patch_add (sub_t *self, fmq_patch_t *patch)
{
    //  Delete duplicate patches
    fmq_patch_t *existing = (fmq_patch_t *) zlist_first (self->client->patches);
    while (existing) {
        if (streq (fmq_file_name (fmq_patch_file (patch), NULL),
                    fmq_file_name (fmq_patch_file (existing), NULL))) {
            zlist_remove (self->client->patches, existing);
            break;
        }
        existing = (fmq_patch_t *) zlist_next (self->client->patches);
    }
    zlist_append (self->client->patches, fmq_patch_dup (patch));
}
</declare>
